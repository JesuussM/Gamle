@page "/playing"
@rendermode InteractiveServer
@inject IJSRuntime JS
@using Gamle.Components.Data

<PageTitle>Gamle</PageTitle>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    @* ! Delete all occurences of logToConsole when no longer needed *@
    <script>
        function logToConsole(message) {
            console.log(message);
        }
    </script>
</head>

<div class="container-fluid d-block" data-bs-theme="dark">
    <div class="container">
        <h1 class="display-1"><strong>Gamle</strong></h1>
        <div class="row">
            <div class="col-md-6 d-flex align-items-center">
                <div class="form-floating flex-grow-1">
                    <input class="form-control" list="datalistOptions" placeholder="" @bind="inputText"
                        @oninput="UpdateInput" />
                    <label class="form-label">Search</label>
                    <datalist id="datalistOptions">
                        @if (resultsFromSearch != null && resultsFromSearch.results != null)
                        {
                            @foreach (var item in resultsFromSearch.results)
                            {
                                <option value="@item.name"></option>
                            }
                        }
                        else
                        {
                            <option value="No results found"></option>
                        }
                    </datalist>
                </div>
                <button class="btn btn-outline-primary btn-lg ms-2"
                    @onclick="checkIfGameExistsInOptions">Submit</button>
            </div>
        </div>
        <div class="@alertIsVisible">
            <div class="col-md-6">
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-@iconError" />
                    @messageError
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row guess-counter">
            <div class="col-md-6">
                <h6>Guess @currentCount of 10</h6>
            </div>
        </div>

        @if (gameGuesses == null) 
        {
            <div class="row"></div>
        } else 
        {
            @foreach (var item in gameGuesses)
            {
                @* TODO: Add better styling *@
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <img src="@item.results.image.thumb_url" class="img-thumbnail" alt="@item.results.name" />
                    </div>
                    <div class="col-md-3">
                        <h6>@item.results.name</h6>
                    </div>
                </div>
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <h6>@item.results.original_release_date</h6>
                    </div>
                    <div class="col-md-2">
                        @foreach (var rating in item.results.original_game_rating)
                        {
                            <h6>@rating.name</h6>
                        }
                    </div>
                </div>
                <div class="row align-items-center">
                    <div class="col-md-2">
                        @foreach (var publisher in item.results.publishers)
                        {
                            <h6>@publisher.name</h6>
                        }
                    </div>
                    <div class="col-md-4">
                        @foreach (var genre in item.results.genres)
                        {
                            <h6>@genre.name</h6>
                        }
                    </div>
                </div>
                <div class="row align-items-center">
                    <div class="col-md-6">
                        @foreach (var platform in item.results.platforms)
                        {
                            <span class="badge bg-secondary">@platform.abbreviation</span>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>


@code {
    // Variables
    public HttpClient httpClient = new();
    private string? apiKey;
    private bool _isInitialized;
    Random random = new();
    public GameResult? randomGame;
    public List<GameResult>? gameGuesses;
    public int currentCount = 0;
    public string? inputText;
    public string iconError = "emoji-frown";
    public string messageError = "Something went wrong";
    public string alertIsVisible = "row d-none";
    public searchResult? resultsFromSearch;
    public Timer? _debounceTimer;
    public string guessId;

    // Classes used to store results from API calls
    public class GameResult
    {
        public string? error { get; set; }
        public Results? results { get; set; }
    }

    public class Results
    {
        public string? deck { get; set; }
        public string? guid { get; set; }
        public Image? image { get; set; }
        public string? name { get; set; }
        public List<OriginalGameRating>? original_game_rating { get; set; }
        public string? original_release_date { get; set; }
        public List<Platform>? platforms { get; set; }
        public string? site_detail_url { get; set; }
        public List<Genre>? genres { get; set; }
        public List<Publisher>? publishers { get; set; }
    }

    public class Image
    {
        public string? thumb_url { get; set; }
    }

    public class OriginalGameRating
    {
        public int id { get; set; }
        public string? name { get; set; }
    }

    public class Platform
    {
        public string? abbreviation { get; set; }
    }

    public class Genre
    {
        public string? name { get; set; }
    }

    public class Publisher
    {
        public string? name { get; set; }
    }

    public class searchResult
    {
        public string? error { get; set; }
        public int statusCode { get; set; }
        public List<SearchGameResult>? results { get; set; }
    }

    public class SearchGameResult
    {
        public string? guid { get; set; }
        public string? name { get; set; }
        public string? resourceType { get; set; }
    }

    // Methods
    protected override void OnInitialized()
    {
        apiKey = Environment.GetEnvironmentVariable("API_KEY");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;
            await GetRandomGame();
        }
    }

    public async Task GetRandomGame()
    {
        int randomGameId = random.Next(1, 131);
        var data = new Data();
        randomGameId = data.gameIds[randomGameId];

        await JS.InvokeVoidAsync("logToConsole", randomGameId);

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://www.giantbomb.com/api/game/{randomGameId}/?api_key={apiKey}&format=json&field_list=deck,image,name,platforms,site_detail_url,publishers,genres,guid,original_game_rating,original_release_date,reviews");
            request.Headers.Add("User-Agent", "Gamle");
            var response = await httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            randomGame = await response.Content.ReadFromJsonAsync<GameResult>();

            if (randomGame == null || randomGame.error != "OK")
            {
                DisplayError(true, "emoji-frown", "Error retrieving game, Please try again later.");
                StateHasChanged();
                return;
            }

            await JS.InvokeVoidAsync("logToConsole", randomGame);
        }
        catch (Exception e)
        {
            DisplayError(true, "emoji-frown", "Error retrieving game, Please try again later.");
            StateHasChanged();
            await JS.InvokeVoidAsync("logToConsole", "Thrown:" + e.Message);
            return;
        }
    }

    public async Task UpdateInput(ChangeEventArgs e)
    {
        inputText = e.Value.ToString();
        _debounceTimer?.Dispose();
        _debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await SearchGetGames();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }

    public async Task checkIfGameExistsInOptions()
    {
        if (resultsFromSearch != null)
        {
            var storedResults = resultsFromSearch.results;
            var storedInput = inputText;
            await JS.InvokeVoidAsync("logToConsole", resultsFromSearch.results);
            await JS.InvokeVoidAsync("logToConsole", inputText);

            foreach (var item in storedResults)
            {
                if (item.name != null && item.guid != null && storedInput != null)
                {
                    if (item.name.ToLower() == storedInput.ToLower())
                    {
                        await JS.InvokeVoidAsync("logToConsole", "FOUND");
                        guessId = item.guid.Substring(5);
                        DisplayError(false, "", "");
                        await GetGameInfo(guessId);
                        break;
                    }
                    else
                    {
                        DisplayError(true, "exclamation-triangle-fill", "Invalid Game, use the search options to select a game");
                        await JS.InvokeVoidAsync("logToConsole", "NOT FOUND");
                    }
                }
            }
        }
        else
        {
            await JS.InvokeVoidAsync("logToConsole", "results: null");
        }
    }

    public async Task SearchGetGames()
    {

        try
        {
            await JS.InvokeVoidAsync("logToConsole", "InputText:" + inputText);
            if (!string.IsNullOrEmpty(inputText))
            {
                var request = new HttpRequestMessage(HttpMethod.Get,
                $"https://www.giantbomb.com/api/search/?api_key={apiKey}&format=json&limit=5&resources=game&query={inputText}&field_list=name,guid");
                request.Headers.Add("User-Agent", "Gamle");
                var response = await httpClient.SendAsync(request);
                response.EnsureSuccessStatusCode();
                resultsFromSearch = await response.Content.ReadFromJsonAsync<searchResult>();
            }
            await JS.InvokeVoidAsync("logToConsole", resultsFromSearch);
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("logToConsole", e.Message);
            return;
        }
    }

    public void DisplayError(Boolean displayError, string icon, string message)
    {
        if (displayError)
        {
            alertIsVisible = "row";
            iconError = icon;
            messageError = message;
        }
        else
        {
            alertIsVisible = "row d-none";
        }
    }

    public async Task GetGameInfo(string gameId)
    {
        try 
        {
            var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://www.giantbomb.com/api/game/{gameId}/?api_key={apiKey}&format=json&field_list=deck,image,name,platforms,site_detail_url,publishers,genres,guid,original_game_rating,original_release_date,reviews");
            request.Headers.Add("User-Agent", "Gamle");
            var response = await httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var gameResult = await response.Content.ReadFromJsonAsync<GameResult>();

            if (gameResult == null || gameResult.error != "OK")
            {
                DisplayError(true, "emoji-frown", "Error retrieving game, Please try again later.");
                StateHasChanged();
                return;
            }

            if (gameGuesses == null)
            {
                gameGuesses = new List<GameResult>();
            }
            
            gameGuesses.Add(gameResult);
            StateHasChanged();
        } catch(Exception e)
        {
            DisplayError(true, "emoji-frown", "Error retrieving game, Please try again later.");
            StateHasChanged();
            await JS.InvokeVoidAsync("logToConsole", "Thrown:" + e.Message);
            return;
        }

        
        await JS.InvokeVoidAsync("logToConsole", gameGuesses);
    }

    public void CompareGuessToGame(string gameGuess)
    {
        currentCount++;
        if (currentCount <= 10)
        {
            @* TODO: Add code to compare the games and display results *@

        }
        else
        {
            @* TODO: Add code to show user lost the game and display correct game*@
        }
    }
}